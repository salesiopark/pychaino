name: Build & Publish to (Test)PyPI

on:
  push:
    branches:
      - main            # main push 시 -> TestPyPI 배포
    tags:
      - "v*"            # 태그(vX.Y.Z) push 시 -> 실 PyPI 배포
  workflow_dispatch:    # 수동 실행 가능하게 추가

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build sdist & wheel
        run: python -m build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*

  publish-testpypi:
    needs: build
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Upload to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          skip-existing: true  # 실수로 같은 버전을 다시 올리면 건너뜀

  publish-pypi:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')   # 태그 push일 때만
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      # checkout이 필요함 - pyproject.toml 파일을 읽기 위해
      - uses: actions/checkout@v4

      # (선택) 태그와 pyproject.toml의 버전 일치 검사
      - name: Check tag matches project version
        run: |
          TAG="${GITHUB_REF##*/}"                   # e.g. v1.2.3
          VERSION=$(python - <<'PY'
          import tomllib, pathlib
          data = tomllib.loads(pathlib.Path("pyproject.toml").read_text(encoding="utf-8"))
          print(data["project"]["version"])
          PY
          )
          if [ "v$VERSION" != "$TAG" ]; then
            echo "::error ::Tag ($TAG) does not match project.version ($VERSION)"
            exit 1
          fi

      - name: Upload to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: false